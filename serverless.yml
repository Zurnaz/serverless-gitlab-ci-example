service: cicd

frameworkVersion: ">=1.43 <2.0.0"

plugins:
  - "@anttiviljami/serverless-stack-output"
  - serverless-domain-manager
  - serverless-iopipe-layers
  - serverless-webpack

package:
  individually: true
  excludeDevDependencies: true

custom:
  iopipe:
    token: ${env:IOPIPE_TOKEN}
  output:
    handler: scripts/output.process
    file: stack.json
  webpack:
    packager: "yarn"
    webpackConfig: "webpack.config.js"
    keepOutputDirectory: true
    excludeFiles: "**/*.unit.js"
    includeModules: true
  customDomain:
    domainName: ${self:provider.stage}.bogdandrema.com
    # stage: ci # defaults to provider.stage and if nothing set 'dev'
    basePath: api
    certificateName: "*.bogdandrema.com"
    createRoute53Record: true
    endpointType: "regional"
    enabled: false # Disabling for now

provider:
  name: aws
  region: eu-west-2
  runtime: nodejs10.x
  environment:
    DYNAMODB_TABLE_NAME: ${env:DYNAMODB_TABLE_NAME}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:ListStreams
      Resource:
        Fn::GetAtt:
          - myDynamoTable
          - Arn

functions:
  # Feature one
  featureOne:
    handler: src/feature-one/handler.get
    timeout: 30
    memorySize: 128
    events:
      - http:
          path: first
          method: get
          cors: true

  # Feature two
  put:
    handler: src/feature-two/handler.put
    timeout: 2
    memorySize: 128
    events:
      - http:
          path: item
          method: post
          cors: true

  delete:
    handler: src/feature-two/handler.delete
    timeout: 2
    memorySize: 128
    events:
      - http:
          path: item
          method: delete
          cors: true

  get:
    handler: src/feature-two/handler.get
    timeout: 2
    memorySize: 128
    events:
      - http:
          path: item
          method: get
          cors: true

  scan:
    handler: src/feature-two/handler.scan
    timeout: 2
    memorySize: 128
    events:
      - http:
          path: item/scan
          method: get
          cors: true

resources:
  Resources:
    myDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE_NAME}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  Outputs:
    Region:
      Value: ${self:provider.region}
    Stage:
      Value: ${self:provider.stage}
